# GitHub Actions workflow for production deployments with approval
name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      staging_build_id:
        description: 'Build ID from staging (optional - will use latest successful)'
        required: false
      reason:
        description: 'Reason for production deployment'
        required: true
        default: 'Production release'
      skip_approval:
        description: 'Skip manual approval (admin only)'
        type: boolean
        required: false
        default: false

env:
  STAGING_PROJECT_ID: staging-adk
  PROD_PROJECT_ID: production-adk
  REGION: us-central1

jobs:
  validate-staging:
    name: Validate Staging Success
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      staging_url: ${{ steps.validate.outputs.staging_url }}
      image_url: ${{ steps.validate.outputs.image_url }}

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.STAGING_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Validate staging deployment
        id: validate
        run: |
          echo "🔍 Validating staging deployment..."

          # Get staging service URL
          staging_url=$(gcloud run services describe my-agentic-rag \
            --region ${{ env.REGION }} \
            --project ${{ env.STAGING_PROJECT_ID }} \
            --format="value(status.url)")

          echo "staging_url=$staging_url" >> $GITHUB_OUTPUT
          echo "📍 Staging URL: $staging_url"

          # Get current image
          image_url=$(gcloud run services describe my-agentic-rag \
            --region ${{ env.REGION }} \
            --project ${{ env.STAGING_PROJECT_ID }} \
            --format="value(spec.template.spec.template.spec.containers[0].image)")

          echo "image_url=$image_url" >> $GITHUB_OUTPUT
          echo "📦 Image: $image_url"

          # Check if service exists and is deployed (skip health check for private services)
          if [[ -n "$staging_url" ]]; then
            echo "✅ Staging service found and deployed"
          else
            echo "❌ Staging service not found"
            exit 1
          fi

  approve-production:
    name: Approve Production Deployment
    runs-on: ubuntu-latest
    needs: validate-staging
    if: github.event.inputs.skip_approval != 'true'
    environment:
      name: production-approval
      url: https://my-agentic-rag-638797485217.us-central1.run.app

    steps:
      - name: Request approval
        run: |
          echo "🔒 Manual approval required for production deployment"
          echo "📊 Staging URL: ${{ needs.validate-staging.outputs.staging_url }}"
          echo "📦 Image: ${{ needs.validate-staging.outputs.image_url }}"
          echo "📝 Reason: ${{ github.event.inputs.reason || 'Automated deployment after staging success' }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-staging, approve-production]
    if: always() && (needs.approve-production.result == 'success' || github.event.inputs.skip_approval == 'true')
    environment: production

    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
          project_id: ${{ env.PROD_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Production (submit & stream logs)
        id: build
        run: |
          set -euo pipefail
          
          echo "🚀 Starting production deployment..."
          
          # Submit build and capture ID
          BUILD_OUTPUT="$(gcloud builds submit \
            --config=.cloudbuild/deploy-to-prod.yaml \
            --project=${{ env.PROD_PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --async)"
            
          # Extract build ID from the output
          BUILD_ID="$(echo "$BUILD_OUTPUT" | grep -o 'builds/[^]]*' | cut -d'/' -f2)"
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "� Build ID: $BUILD_ID"
          
          # Stream logs and wait for completion (exits with build status)
          echo "📺 Streaming build logs..."
          gcloud builds log --region=${{ env.REGION }} --stream "$BUILD_ID"
          
          echo "✅ Production deployment completed successfully!"

      - name: Validate production deployment
        run: |
          echo "🔍 Validating production deployment..."

          # Get production service URL
          prod_url=$(gcloud run services describe my-agentic-rag \
            --region ${{ env.REGION }} \
            --project ${{ env.PROD_PROJECT_ID }} \
            --format="value(status.url)")

          echo "🌐 Production URL: $prod_url"

          # Verify deployment completed
          sleep 30  # Allow time for service to be ready
          if [[ -n "$prod_url" ]]; then
            echo "✅ Production deployment completed successfully"
          else
            echo "⚠️ Production deployment may have failed"
          fi

      - name: Create GitHub release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().slice(0, 19).replace(/[:-]/g, '')}`,
              name: `Production Release ${new Date().toISOString().slice(0, 10)}`,
              body: `🚀 **Production Deployment Successful**\n\n📦 Image: ${{ needs.validate-staging.outputs.image_url }}\n🔨 Build ID: ${{ steps.build.outputs.build_id }}\n📝 Reason: ${{ github.event.inputs.reason || 'Automated deployment after staging success' }}\n\n🌐 **URLs:**\n- Production: https://my-agentic-rag-638797485217.us-central1.run.app\n- Staging: ${{ needs.validate-staging.outputs.staging_url }}`,
              draft: false,
              prerelease: false
            });

            console.log(`Release created: ${release.html_url}`);

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Production deployment failed"
          echo "🔨 Build ID: ${{ steps.build.outputs.build_id || 'N/A' }}"
          echo " Build Logs: https://console.cloud.google.com/cloud-build/builds;region=${{ env.REGION }}?project=${{ env.PROD_PROJECT_ID }}"
          echo "**Action Required:** Please investigate the build logs and retry deployment."
